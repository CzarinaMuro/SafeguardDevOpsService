# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- phase2/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  setupprojectdir: 'SafeguardDevOpsServiceWix'
  setupproject: '**/$(setupprojectdir)/*.wixproj'
  pluginsdir: 'ExternalPlugins'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  codeSigningCertFileName: 'OneIdentityCodeSigning.pfx'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'Azure.Infrastructure.CodeSigning'
    KeyVaultName: 'CodeSigningCertificates'
    SecretsFilter: '*'
  displayName: 'Get code signing certificate from Azure Key Vault'

  â€“ task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort

- powershell: |
      $kvSecretBytes = [System.Convert]::FromBase64String("$(OneIdentity-CodeSigning)")
      $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
      $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
      $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12,"$(OneIdentity-CodeSigningCertPassword)")
      $certpath = '$(Build.BinariesDirectory)/$(codeSigningCertFileName)'
      Write-Verbose -Verbose $certpath
      [System.IO.File]::WriteAllBytes($certpath, $protectedCertificateBytes)
  displayName: 'Save code signing certificate to PFX file'

- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
    arguments: $(Build.SourcesDirectory) $(Build.BuildId)
    ignoreLASTEXITCODE: true

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:OutDir=$(Build.BinariesDirectory)\ /p:DevSign=false /p:SignFiles=true /p:CertificatePassword=$(OneIdentity-CodeSigningCertPassword) /p:CertificatePath="$(Build.BinariesDirectory)/$(codeSigningCertFileName)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(buildSolution)'

- task: VSBuild@1
  inputs:
    solution: '$(setupproject)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(setupproject)'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\$(setupprojectdir)'
    contents: '**\bin\**'
    targetFolder: $(Build.ArtifactStagingDirectory)
  displayName: 'Copy files to staging folder'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\$(pluginsdir)\bin\$(buildConfiguration)'
    contents: '**'
    targetFolder: $(Build.ArtifactStagingDirectory)\bin\$(buildConfiguration)\$(pluginsdir)
  displayName: 'Copy plugins to staging folder'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'SafeguardDevOpsService' 
  displayName: 'Public the artifacts'

